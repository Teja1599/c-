// Polymorphism addition-method overloading
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp3
{
    class Program
    {
        int a = 6, b = 4;
        public void sum()
        {
            Console.WriteLine("sum is : " + (a + b));
        }
        public void sum (int a,int b)
        {
            Console.WriteLine("sum is : " + (a + b));
        }
        public int sum (int a, int b,int c)
        {
            return (a + b);
        }
        public void sum (string a,string b)
        {
            Console.WriteLine("sum is : " +((a) + (b)));
        }

        static void Main(string[] args)
        {
            Program p = new Program();
            p.sum();
            p.sum(1, 2);
            Console.WriteLine(p.sum(1, 2, 3));
            p.sum("Teja", "Pekala");
            Console.ReadLine();
        }
    }
}


// Polymorphism multiplication-method overloading
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp3
{
    class Program
    {
        int a = 6, b = 4;
        public void mul()
        {
            Console.WriteLine("mul is : " + (a*b));
        }
        public void mul (int a,int b)
        {
            Console.WriteLine("mul is : " + (a*b));
        }
        public int mul (int a, int b,int c)
        {
            return (a*b);
        }
        public void mul (string a,string b)
        {
            Console.WriteLine("mul is : " +(Convert.ToInt32(a)*Convert.ToInt32(b)));
        }

        static void Main(string[] args)
        {
            Program p = new Program();
            p.mul();
            p.mul(1, 2);
            Console.WriteLine(p.mul(1, 2, 3));
            p.mul("2", "4");
            Console.ReadLine();
        }
    }
}


//multiplication operator overloading- used to do operations on objects
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp3
{
    class mul
    {
        public int n1,n2;
        public mul(int n1,int n2)
        {
            this.n1 = n1;
            this.n2 = n2;
        }
		
        public static mul operator *(mul m1,mul m2) // opration overloading syntax
        {
            mul m3 = new mul(0, 0);
            m3.n1 = m1.n1 * m2.n1;
            m3.n2 = m1.n2 * m2.n2;
            return m3;
        }    
    }
   class pro
    {
        public static void main()
        {
            mul m1 = new mul(2, 4);
            mul m2 = new mul(6, 4);
            mul m3 = new mul(0, 0);
            Console.WriteLine("Values before mul are n1: " + m3.n1 + " and n2:  " + m3.n2);
            m3 = m1*m2;
            Console.WriteLine("Values after mul are n1: " + m3.n1 + " and n2:  " + m3.n2);

            Console.ReadLine();
        }
    }
}


// compile time polymorphism- method overloading

// runtime polymorphism- method overriding
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

 

namespace Day_4
{
    public class ClassA
    {
        int n1, n2;

 

        public ClassA()
        {
            Console.WriteLine("I am Base class Constructor");
        }
        public ClassA(int i, int j)
        {
            n1 = i;
            n2 = j;
            Console.WriteLine("Parameterized Constructor Invoked");
            Console.WriteLine("Values are" + n1 + " and " + n2);
        }

 

        public virtual void Swap()
        {
            Console.WriteLine("Hi I am swap Function ");
        }
    }

 

    public class DerivedClass : ClassA
    {

 

        public DerivedClass() : base() { }
        public DerivedClass(int i,int j) : base(i, j) {
            base.Swap();
        }
    }
    class Class3
    {
        public static void Main()
        {
            DerivedClass d = new DerivedClass();
            DerivedClass d2 = new DerivedClass(10, 20);
            Console.ReadLine();
        }
    }
}


// task 
Create a C# program that prompts the user for three names of people and stores them in an array of Person-type objects. There will be two people of the Student type and one person of the Teacher type.

To do this, create a Person class that has a Name property of type string, a constructor that receives the name as a parameter and overrides the ToString () method.

Then create two more classes that inherit from the Person class, they will be called Student and Teacher. The Student class has a Study method that writes by console that the student is studying. The Teacher class will have an Explain method that writes to the console that the teacher is explaining. Remember to also create two constructors on the child classes that call the parent constructor of the Person class.

End the program by reading the people (the teacher and the students) and execute the Explain and Study methods.

using System;
namespace today
{
class person
{
	public string name;
	public  person(string name)
	{
		this.name=name;
	}
	public override string ToString()
	{
		return name;	
	}
}
class student:person
{
	public student(string name):base(name) {}
	
	public void study()
	{
		Console.WriteLine("the student " +name+" is studying");	
	}
}
class teacher:person
{
	public teacher(string name):base(name) {}
	public void explain()
	{
		Console.WriteLine("the teacher " +name+" is explaining");
	}
}
public class main
{
	public static void Main(string[]args)
	{
		student s1=new student("ravi");
		s1.study();
		teacher t1=new teacher("seema");
		t1.explain();
		person p1=new person("person");
		Console.WriteLine(p1.ToString());
		
	}
}
}


// task-2
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp4
{
    class Shape
    {
        public double Area()
        {
            return 0;
        }
        public double Perimeter()
        {
            return 0;
        }
    }
    class Rectangle : Shape
    {
        double side1, side2;
        public Rectangle(double side1, double side2)
        {
            this.side1 = side1;
            this.side2 = side2;
        }
        public double Area()
        {
            return side1 * side2;
        }
        public double Perimeter()
        {
            return (2 * (side1 + side2));
        }
    }
    class Circle : Shape
    {
        double radius;
        public Circle(double radius)
        {
            this.radius = radius;
        }
        public double Area()
        {
            return ((22 / 7) * (radius * radius));
        }
        public double Perimeter()
        {
            return (2 * (22 / 7) * radius);
        }
    }
    class Class11
    {
        public static void Main()
        {
            Rectangle r = new Rectangle(3.5, 2.5);
            Console.WriteLine("Area of rectangle:" + r.Area());
            Console.WriteLine("Perimeter of rectangle:" + r.Perimeter());
            Console.WriteLine();
            Circle c = new Circle(2.5);
            Console.WriteLine("Area of Circle is: " + c.Area());
            Console.WriteLine("Perimeter of Circle is: " + c.Perimeter());
            Console.ReadLine();
        }
    }
}



// task-3
Create a C# program that prompts the user for three names of people and stores them in an array of Person-type objects. There will be two people of the Student type and one person of the Teacher type.

To do this, create a Person class that has a Name property of type string, a constructor that receives the name as a parameter and overrides the ToString () method.

Then create two more classes that inherit from the Person class, they will be called Student and Teacher. The Student class has a Study method that writes by console that the student is studying. The Teacher class will have an Explain method that writes to the console that the teacher is explaining. Remember to also create two constructors on the child classes that call the parent constructor of the Person class.

End the program by reading the people (the teacher and the students) and execute the Explain and Study methods.


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

 

namespace Day_4
{
    public class Person
    {
        public string Name { get; set; }
        public Person(string Name)
        {
            this.Name = Name;
        }
        public override string ToString()
        {
            return "Hello! My name is "+Name; 
        }
        ~Person()
        {
            Name = string.Empty;
        }
    }
    public class Teacher:Person
    {
        public Teacher(string name):base(name)
        {
            Name = name;
        }
        public void Explain()
        {
            Console.WriteLine("Explain");
        }
    }
    public class Student:Person
    {
        public Student(string name) : base(name)
        {
            Name = name;
        }
        public void Study()
        {
            Console.WriteLine("Study");
        }
    }

 

    class Class4
    {
        public static void Main()
        {

 

            int Total = 3;

 

            Person[] people = new Person[Total];
            int[] a = new int[2];

 

            for (int i = 0; i < Total; i++)
            {
                if(i==0)
                {
                    people[i] = new Teacher(Console.ReadLine());

 

                }
                else
                {
                    people[i] = new Student(Console.ReadLine());
                }

 

            }
            for (int i = 0; i < Total; i++)
            {
                if(i==0)
                {
                    ((Teacher)people[i]).Explain();
                    float p=(float)a[0];
                }
                else
                {
                    ((Student)people[i]).Study();
                }
            }
            Console.ReadLine();
        }
    }
}
 